package event

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DefaultEventS) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "header":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "H")
				return
			}
			if z.H == nil {
				z.H = make(map[string]interface{}, zb0002)
			} else if len(z.H) > 0 {
				for key := range z.H {
					delete(z.H, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 interface{}
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "H")
					return
				}
				za0002, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "H", za0001)
					return
				}
				z.H[za0001] = za0002
			}
		case "body":
			z.B, err = dc.ReadBytes(z.B)
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
		case "meta":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "M")
					return
				}
				z.M = nil
			} else {
				if z.M == nil {
					z.M = new(DefaultMeta)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "M")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "M")
						return
					}
					switch msgp.UnsafeString(field) {
					case "properties":
						var zb0004 uint32
						zb0004, err = dc.ReadMapHeader()
						if err != nil {
							err = msgp.WrapError(err, "M", "Properties")
							return
						}
						if z.M.Properties == nil {
							z.M.Properties = make(map[string]interface{}, zb0004)
						} else if len(z.M.Properties) > 0 {
							for key := range z.M.Properties {
								delete(z.M.Properties, key)
							}
						}
						for zb0004 > 0 {
							zb0004--
							var za0003 string
							var za0004 interface{}
							za0003, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "M", "Properties")
								return
							}
							za0004, err = dc.ReadIntf()
							if err != nil {
								err = msgp.WrapError(err, "M", "Properties", za0003)
								return
							}
							z.M.Properties[za0003] = za0004
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "M")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DefaultEventS) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "header"
	err = en.Append(0x83, 0xa6, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.H)))
	if err != nil {
		err = msgp.WrapError(err, "H")
		return
	}
	for za0001, za0002 := range z.H {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "H")
			return
		}
		err = en.WriteIntf(za0002)
		if err != nil {
			err = msgp.WrapError(err, "H", za0001)
			return
		}
	}
	// write "body"
	err = en.Append(0xa4, 0x62, 0x6f, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.B)
	if err != nil {
		err = msgp.WrapError(err, "B")
		return
	}
	// write "meta"
	err = en.Append(0xa4, 0x6d, 0x65, 0x74, 0x61)
	if err != nil {
		return
	}
	if z.M == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "properties"
		err = en.Append(0x81, 0xaa, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.M.Properties)))
		if err != nil {
			err = msgp.WrapError(err, "M", "Properties")
			return
		}
		for za0003, za0004 := range z.M.Properties {
			err = en.WriteString(za0003)
			if err != nil {
				err = msgp.WrapError(err, "M", "Properties")
				return
			}
			err = en.WriteIntf(za0004)
			if err != nil {
				err = msgp.WrapError(err, "M", "Properties", za0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DefaultEventS) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "header"
	o = append(o, 0x83, 0xa6, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendMapHeader(o, uint32(len(z.H)))
	for za0001, za0002 := range z.H {
		o = msgp.AppendString(o, za0001)
		o, err = msgp.AppendIntf(o, za0002)
		if err != nil {
			err = msgp.WrapError(err, "H", za0001)
			return
		}
	}
	// string "body"
	o = append(o, 0xa4, 0x62, 0x6f, 0x64, 0x79)
	o = msgp.AppendBytes(o, z.B)
	// string "meta"
	o = append(o, 0xa4, 0x6d, 0x65, 0x74, 0x61)
	if z.M == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "properties"
		o = append(o, 0x81, 0xaa, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73)
		o = msgp.AppendMapHeader(o, uint32(len(z.M.Properties)))
		for za0003, za0004 := range z.M.Properties {
			o = msgp.AppendString(o, za0003)
			o, err = msgp.AppendIntf(o, za0004)
			if err != nil {
				err = msgp.WrapError(err, "M", "Properties", za0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DefaultEventS) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "header":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "H")
				return
			}
			if z.H == nil {
				z.H = make(map[string]interface{}, zb0002)
			} else if len(z.H) > 0 {
				for key := range z.H {
					delete(z.H, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 interface{}
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "H")
					return
				}
				za0002, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "H", za0001)
					return
				}
				z.H[za0001] = za0002
			}
		case "body":
			z.B, bts, err = msgp.ReadBytesBytes(bts, z.B)
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
		case "meta":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.M = nil
			} else {
				if z.M == nil {
					z.M = new(DefaultMeta)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "M")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "M")
						return
					}
					switch msgp.UnsafeString(field) {
					case "properties":
						var zb0004 uint32
						zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "M", "Properties")
							return
						}
						if z.M.Properties == nil {
							z.M.Properties = make(map[string]interface{}, zb0004)
						} else if len(z.M.Properties) > 0 {
							for key := range z.M.Properties {
								delete(z.M.Properties, key)
							}
						}
						for zb0004 > 0 {
							var za0003 string
							var za0004 interface{}
							zb0004--
							za0003, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "M", "Properties")
								return
							}
							za0004, bts, err = msgp.ReadIntfBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "M", "Properties", za0003)
								return
							}
							z.M.Properties[za0003] = za0004
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "M")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DefaultEventS) Msgsize() (s int) {
	s = 1 + 7 + msgp.MapHeaderSize
	if z.H != nil {
		for za0001, za0002 := range z.H {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.GuessSize(za0002)
		}
	}
	s += 5 + msgp.BytesPrefixSize + len(z.B) + 5
	if z.M == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 11 + msgp.MapHeaderSize
		if z.M.Properties != nil {
			for za0003, za0004 := range z.M.Properties {
				_ = za0004
				s += msgp.StringPrefixSize + len(za0003) + msgp.GuessSize(za0004)
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DefaultMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "properties":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Properties")
				return
			}
			if z.Properties == nil {
				z.Properties = make(map[string]interface{}, zb0002)
			} else if len(z.Properties) > 0 {
				for key := range z.Properties {
					delete(z.Properties, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 interface{}
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Properties")
					return
				}
				za0002, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Properties", za0001)
					return
				}
				z.Properties[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DefaultMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "properties"
	err = en.Append(0x81, 0xaa, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Properties)))
	if err != nil {
		err = msgp.WrapError(err, "Properties")
		return
	}
	for za0001, za0002 := range z.Properties {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Properties")
			return
		}
		err = en.WriteIntf(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Properties", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DefaultMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "properties"
	o = append(o, 0x81, 0xaa, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Properties)))
	for za0001, za0002 := range z.Properties {
		o = msgp.AppendString(o, za0001)
		o, err = msgp.AppendIntf(o, za0002)
		if err != nil {
			err = msgp.WrapError(err, "Properties", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DefaultMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "properties":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Properties")
				return
			}
			if z.Properties == nil {
				z.Properties = make(map[string]interface{}, zb0002)
			} else if len(z.Properties) > 0 {
				for key := range z.Properties {
					delete(z.Properties, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 interface{}
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Properties")
					return
				}
				za0002, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Properties", za0001)
					return
				}
				z.Properties[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DefaultMeta) Msgsize() (s int) {
	s = 1 + 11 + msgp.MapHeaderSize
	if z.Properties != nil {
		for za0001, za0002 := range z.Properties {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.GuessSize(za0002)
		}
	}
	return
}
