/*
Copyright 2021 Loggie Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogMsg struct {
	RawLog []byte            `protobuf:"bytes,1,opt,name=rawLog,proto3" json:"rawLog,omitempty"`
	Header map[string][]byte `protobuf:"bytes,2,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Structured log data
	LogBody              map[string][]byte `protobuf:"bytes,3,rep,name=logBody,proto3" json:"logBody,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsSplit              bool              `protobuf:"varint,4,opt,name=isSplit,proto3" json:"isSplit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LogMsg) Reset()         { *m = LogMsg{} }
func (m *LogMsg) String() string { return proto.CompactTextString(m) }
func (*LogMsg) ProtoMessage()    {}
func (*LogMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{0}
}

func (m *LogMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogMsg.Unmarshal(m, b)
}
func (m *LogMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogMsg.Marshal(b, m, deterministic)
}
func (m *LogMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMsg.Merge(m, src)
}
func (m *LogMsg) XXX_Size() int {
	return xxx_messageInfo_LogMsg.Size(m)
}
func (m *LogMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LogMsg proto.InternalMessageInfo

func (m *LogMsg) GetRawLog() []byte {
	if m != nil {
		return m.RawLog
	}
	return nil
}

func (m *LogMsg) GetHeader() map[string][]byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LogMsg) GetLogBody() map[string][]byte {
	if m != nil {
		return m.LogBody
	}
	return nil
}

func (m *LogMsg) GetIsSplit() bool {
	if m != nil {
		return m.IsSplit
	}
	return false
}

type LogResp struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogResp) Reset()         { *m = LogResp{} }
func (m *LogResp) String() string { return proto.CompactTextString(m) }
func (*LogResp) ProtoMessage()    {}
func (*LogResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{1}
}

func (m *LogResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogResp.Unmarshal(m, b)
}
func (m *LogResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogResp.Marshal(b, m, deterministic)
}
func (m *LogResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResp.Merge(m, src)
}
func (m *LogResp) XXX_Size() int {
	return xxx_messageInfo_LogResp.Size(m)
}
func (m *LogResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResp.DiscardUnknown(m)
}

var xxx_messageInfo_LogResp proto.InternalMessageInfo

func (m *LogResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *LogResp) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LogResp) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*LogMsg)(nil), "grpc.LogMsg")
	proto.RegisterMapType((map[string][]byte)(nil), "grpc.LogMsg.HeaderEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "grpc.LogMsg.LogBodyEntry")
	proto.RegisterType((*LogResp)(nil), "grpc.LogResp")
}

func init() {
	proto.RegisterFile("log.proto", fileDescriptor_a153da538f858886)
}

var fileDescriptor_a153da538f858886 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x6a, 0xea, 0x40,
	0x14, 0x86, 0x6f, 0x12, 0x8d, 0xf1, 0xe8, 0x85, 0xcb, 0x70, 0x29, 0xd3, 0xac, 0xc4, 0x6e, 0xb2,
	0x28, 0xa1, 0xd5, 0x4d, 0xeb, 0x52, 0x28, 0x74, 0x11, 0x41, 0x22, 0x7d, 0x80, 0xe9, 0x78, 0x98,
	0x4a, 0x63, 0x4e, 0x98, 0x49, 0x6c, 0xf3, 0x26, 0x7d, 0xdc, 0x32, 0x13, 0x15, 0xbb, 0xec, 0x6e,
	0x3e, 0xce, 0xf9, 0x38, 0x3f, 0xf3, 0xc3, 0xb0, 0x20, 0x95, 0x56, 0x9a, 0x6a, 0x62, 0x3d, 0xa5,
	0x2b, 0x39, 0xfd, 0xf2, 0x21, 0xcc, 0x48, 0xad, 0x8c, 0x62, 0x57, 0x10, 0x6a, 0xf1, 0x91, 0x91,
	0xe2, 0xde, 0xc4, 0x4b, 0xc6, 0xf9, 0x91, 0xd8, 0x1d, 0x84, 0x6f, 0x28, 0xb6, 0xa8, 0xb9, 0x3f,
	0x09, 0x92, 0xd1, 0x8c, 0xa7, 0xd6, 0x4c, 0x3b, 0x2b, 0x7d, 0x76, 0xa3, 0xa7, 0xb2, 0xd6, 0x6d,
	0x7e, 0xdc, 0x63, 0x73, 0x18, 0x14, 0xa4, 0x96, 0xb4, 0x6d, 0x79, 0xe0, 0x94, 0xeb, 0x1f, 0x4a,
	0xd6, 0xcd, 0x3a, 0xe7, 0xb4, 0xc9, 0x38, 0x0c, 0x76, 0x66, 0x53, 0x15, 0xbb, 0x9a, 0xf7, 0x26,
	0x5e, 0x12, 0xe5, 0x27, 0x8c, 0x1f, 0x61, 0x74, 0x71, 0x85, 0xfd, 0x83, 0xe0, 0x1d, 0x5b, 0x17,
	0x72, 0x98, 0xdb, 0x27, 0xfb, 0x0f, 0xfd, 0x83, 0x28, 0x1a, 0xe4, 0xbe, 0x0b, 0xde, 0xc1, 0xc2,
	0x7f, 0xf0, 0xe2, 0x05, 0x8c, 0x2f, 0xaf, 0xfd, 0xc6, 0x9d, 0xbe, 0xc0, 0x20, 0x23, 0x95, 0xa3,
	0xa9, 0x6c, 0x36, 0xd3, 0x48, 0x89, 0xc6, 0x38, 0x35, 0xca, 0x4f, 0x68, 0x75, 0x49, 0x4d, 0x59,
	0x3b, 0xbd, 0x9f, 0x77, 0xc0, 0x62, 0x88, 0x50, 0x6b, 0xd2, 0x2b, 0xa3, 0x78, 0xe0, 0x6e, 0x9d,
	0x79, 0xb6, 0x00, 0xc8, 0x48, 0x6d, 0x50, 0x1f, 0x76, 0x12, 0xd9, 0xad, 0xab, 0x64, 0x53, 0x6b,
	0x14, 0x7b, 0x36, 0xbe, 0xfc, 0xa6, 0xf8, 0xef, 0x99, 0x6c, 0x86, 0xe9, 0x9f, 0xc4, 0x5b, 0xde,
	0xc3, 0x8d, 0xa4, 0x7d, 0x5a, 0x62, 0x8d, 0xc2, 0x60, 0xda, 0x8a, 0xf2, 0xb3, 0x11, 0x65, 0x6a,
	0x4b, 0x35, 0xd4, 0x68, 0x89, 0x4e, 0x59, 0x46, 0x19, 0xa9, 0xb5, 0x2d, 0x79, 0xed, 0xbd, 0x86,
	0xae, 0xed, 0xf9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0x52, 0x4a, 0xe1, 0xfa, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	LogStream(ctx context.Context, opts ...grpc.CallOption) (LogService_LogStreamClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) LogStream(ctx context.Context, opts ...grpc.CallOption) (LogService_LogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[0], "/grpc.LogService/logStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceLogStreamClient{stream}
	return x, nil
}

type LogService_LogStreamClient interface {
	Send(*LogMsg) error
	CloseAndRecv() (*LogResp, error)
	grpc.ClientStream
}

type logServiceLogStreamClient struct {
	grpc.ClientStream
}

func (x *logServiceLogStreamClient) Send(m *LogMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceLogStreamClient) CloseAndRecv() (*LogResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	LogStream(LogService_LogStreamServer) error
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) LogStream(srv LogService_LogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LogStream not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_LogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).LogStream(&logServiceLogStreamServer{stream})
}

type LogService_LogStreamServer interface {
	SendAndClose(*LogResp) error
	Recv() (*LogMsg, error)
	grpc.ServerStream
}

type logServiceLogStreamServer struct {
	grpc.ServerStream
}

func (x *logServiceLogStreamServer) SendAndClose(m *LogResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceLogStreamServer) Recv() (*LogMsg, error) {
	m := new(LogMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "logStream",
			Handler:       _LogService_LogStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "log.proto",
}
